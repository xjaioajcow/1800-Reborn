import { BSC_TESTNET_ADDRESSES } from './constants';

// Import ABIs for each contract.  TypeScript is configured with
// resolveJsonModule so these imports work without additional loader
// configuration.  Each JSON artifact includes an `abi` field
// generated by Hardhat.
import CoreGameV2Artifact from '../../contracts/abis/CoreGameV2.json';
import GameTokenArtifact from '../../contracts/abis/GameToken.json';
import ShipSBTArtifact from '../../contracts/abis/ShipSBT.json';
import PiratePoolArtifact from '../../contracts/abis/PiratePool.json';

// Extract ABI arrays from the imported artifacts.  These are typed as
// `any[]` because the artifacts are untyped JSON.  Consumers should
// rely on generated typechain types instead of these anyâ€‘typed ABIs
// when possible.
const CoreGameV2Abi: any[] = (CoreGameV2Artifact as any).abi;
const GameTokenAbi: any[] = (GameTokenArtifact as any).abi;
const ShipSBTAbi: any[] = (ShipSBTArtifact as any).abi;
const PiratePoolAbi: any[] = (PiratePoolArtifact as any).abi;

/**
 * A map of contract descriptors used by the SDK.  Each entry
 * includes the deployed address on BSC Testnet and the full ABI
 * definition.  Additional metadata can be attached here (e.g.
 * contract names, source file names) if needed by higher layers.
 */
export const CONTRACTS = {
  coreGameV2: {
    address: BSC_TESTNET_ADDRESSES.CoreGameV2,
    abi: CoreGameV2Abi,
  },
  gameToken: {
    address: BSC_TESTNET_ADDRESSES.GameToken,
    abi: GameTokenAbi,
  },
  shipSBT: {
    address: BSC_TESTNET_ADDRESSES.ShipSBT,
    abi: ShipSBTAbi,
  },
  piratePool: {
    address: BSC_TESTNET_ADDRESSES.PiratePool,
    abi: PiratePoolAbi,
  },
} as const;

export type ContractDescriptor = (typeof CONTRACTS)[keyof typeof CONTRACTS];