import { ethers } from 'ethers'
import * as abis from './types'

/**
 * BSC-Testnet 部署地址（已上传 txt / env 里也可以）
 *
 * TODO: Replace the placeholder addresses below with the actual deployment
 * addresses for the contracts when available. Keeping them in a single
 * constant object makes it easy to update later and prevents magic strings
 * sprinkled throughout your codebase.
 */
export const CONTRACTS = {
  CoreGameV2: '0x...',
  ShipSBT: '0x...',
  GameToken: '0x...',
  PiratePool: '0x...'
} as const

/**
 * GameSdk is a simple wrapper around the on‑chain contracts used by the game.
 * It exposes convenience methods that encapsulate the required calls to
 * ethers.js contracts. Additional methods (e.g. buyShip, voyage, stake)
 * can be added in follow‑up tasks. Methods that interact with the blockchain
 * should use the signer when performing state‑changing transactions.
 */
export class GameSdk {
  readonly provider: ethers.Provider
  readonly signer: ethers.Signer | null

  constructor (provider: ethers.Provider, signer?: ethers.Signer) {
    this.provider = provider
    this.signer = signer ?? null
  }

  /**
   * Example read‑only method: returns the total minted count from the ShipSBT
   * contract. This demonstrates how to instantiate a contract using a
   * generated factory and call a view function. When adding more methods
   * keep the pattern consistent.
   */
  async getMintedCount (): Promise<bigint> {
    const contract = new ethers.Contract(
      CONTRACTS.ShipSBT,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore: the factory typings will be generated by typechain
      abis.ShipSBT__factory.abi,
      this.provider
    )
    // Note: totalSupply returns a BigNumber (BigInt) in ethers v6
    return await contract.totalSupply()
  }

  // 👉 后续在这里继续添加 buyShip / voyage / stake 等方法
}

// Export types generated by typechain for consumers of the SDK
export * as types from './types'